name: Create GitHub Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.6.0

permissions:
  contents: write  # Required to create releases

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for changelog

    - name: Extract version from tag
      id: extract_version
      run: |
        # Remove 'v' prefix from tag to get version
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Extract changelog entry
      id: changelog
      run: |
        # Extract the changelog entry for this version
        VERSION="${{ steps.extract_version.outputs.version }}"
        
        # Create release notes from CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          # Extract content between this version and the next version/unreleased
          awk -v version="$VERSION" '
            /^## \[/ { 
              if (found && $0 !~ "\\[" version "\\]") exit;
              if ($0 ~ "\\[" version "\\]") { found=1; next }
            }
            found && !/^## \[/ { print }
          ' CHANGELOG.md > release_notes.md
          
          # If release notes are empty, provide a default
          if [ ! -s release_notes.md ]; then
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
          fi
        else
          echo "Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "See commit history for changes in this release." >> release_notes.md
        fi
        
        echo "Release notes content:"
        cat release_notes.md

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution packages
      run: |
        echo "🔨 Building distribution packages..."
        python -m build
        
        echo "📦 Built packages:"
        ls -la dist/

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_version.outputs.tag_name }}
        release_name: "Release ${{ steps.extract_version.outputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: dist/sseed-${{ steps.extract_version.outputs.version }}-py3-none-any.whl
        asset_name: sseed-${{ steps.extract_version.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip

    - name: Upload source distribution to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: dist/sseed-${{ steps.extract_version.outputs.version }}.tar.gz
        asset_name: sseed-${{ steps.extract_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Summary
      run: |
        echo "✅ GitHub Release created successfully!"
        echo "🏷️  Tag: ${{ steps.extract_version.outputs.tag_name }}"
        echo "📦 Version: ${{ steps.extract_version.outputs.version }}"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.extract_version.outputs.tag_name }}" 