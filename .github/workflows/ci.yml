name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  MINIMUM_COVERAGE: 85

jobs:
  quality-checks:
    name: Code Quality & Type Checking
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pylint mypy flake8 black>=25.1.0 isort bandit safety
    
    - name: Code formatting check (Black)
      run: |
        echo "::group::Black formatting check"
        black --check --diff sseed/ tests/
        echo "::endgroup::"
    
    - name: Import sorting check (isort)
      run: |
        echo "::group::Import sorting check"
        isort --check-only --diff --profile black --line-length 100 --force-grid-wrap 2 sseed/ tests/
        echo "::endgroup::"
    
    - name: Linting (Pylint)
      run: |
        echo "::group::Pylint analysis"
        pylint sseed/ --fail-under=9.5 --output-format=colorized
        echo "::endgroup::"
    
    - name: Style check (flake8)
      run: |
        echo "::group::Flake8 style check"
        flake8 --max-line-length=210 --extend-ignore=E203,W503,F401,F841,E402,F811,F541,W293 sseed/ tests/ --statistics
        echo "::endgroup::"
    
    - name: Type checking (mypy)
      run: |
        echo "::group::MyPy type checking"
        mypy sseed/ --show-error-codes --show-error-context
        echo "::endgroup::"
    
    - name: Security analysis (Bandit)
      run: |
        echo "::group::Security analysis"
        bandit -r sseed/ -f json -o bandit-report.json
        bandit -r sseed/ -f txt
        echo "::endgroup::"
    
    - name: Dependency security check
      run: |
        echo "::group::Dependency security check"
        safety check -r requirements.txt --save-json safety-report.json 2>/dev/null || true
        safety check -r requirements.txt
        echo "::endgroup::"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-py${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  test-suite:
    name: Test Suite & Coverage
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest pytest-cov pytest-xdist pytest-html coverage[toml]
    
    - name: Run test suite with coverage
      run: |
        echo "::group::Running comprehensive test suite"
        python -m pytest \
          --cov=sseed \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=${{ env.MINIMUM_COVERAGE }} \
          --junit-xml=pytest-results.xml \
          --html=pytest-report.html \
          --self-contained-html \
          -v \
          --tb=short \
          --strict-markers \
          --disable-warnings \
          tests/
        echo "::endgroup::"
    
    - name: Verify coverage threshold
      run: |
        echo "::group::Coverage verification"
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib['line-rate']) * 100
        print(f'{coverage:.1f}')
        ")
        echo "Current coverage: ${COVERAGE}%"
        echo "Minimum required: ${{ env.MINIMUM_COVERAGE }}%"
        
        if (( $(echo "${COVERAGE} < ${{ env.MINIMUM_COVERAGE }}" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below minimum ${{ env.MINIMUM_COVERAGE }}%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets minimum requirement"
        fi
        echo "::endgroup::"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          pytest-results.xml
          pytest-report.html
          coverage.xml
          htmlcov/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  property-based-tests:
    name: Property-Based Mathematical Verification
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install hypothesis
    
    - name: Run property-based tests (Extended)
      run: |
        echo "::group::Extended property-based testing"
        python -m pytest tests/test_slip39_property_based.py \
          -v \
          --tb=short \
          --hypothesis-show-statistics \
          --hypothesis-verbosity=verbose
        echo "::endgroup::"
    
    - name: Generate property test report
      run: |
        echo "::group::Property test summary"
        python -c "
        print('🧮 Mathematical Property Verification Complete')
        print('✅ Shamir Secret Sharing properties verified')
        print('✅ Threshold security properties confirmed')  
        print('✅ Reconstruction determinism validated')
        print('✅ Order independence verified')
        "
        echo "::endgroup::"

  build-package:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: [test-suite, property-based-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: Build source distribution
      run: |
        echo "::group::Building source distribution"
        python -m build --sdist
        echo "::endgroup::"
    
    - name: Build wheel distribution
      run: |
        echo "::group::Building wheel distribution"
        python -m build --wheel
        echo "::endgroup::"
    
    - name: Verify distributions
      run: |
        echo "::group::Verifying built packages"
        python -m twine check dist/*
        
        echo "📦 Built packages:"
        ls -la dist/
        
        echo "📋 Package contents:"
        python -c "
        import zipfile
        import os
        for file in os.listdir('dist'):
          if file.endswith('.whl'):
            print(f'\n🔍 Contents of {file}:')
            with zipfile.ZipFile(f'dist/{file}', 'r') as z:
              for name in sorted(z.namelist()):
                print(f'  {name}')
        "
        echo "::endgroup::"
    
    - name: Test installation from wheel
      run: |
        echo "::group::Testing wheel installation"
        python -m venv test-env
        source test-env/bin/activate
        pip install dist/*.whl
        
        # Test basic functionality
        python -c "
        import sseed
        print(f'✅ SSeed version: {sseed.__version__}')
        print('✅ Package imports successfully')
        "
        
        # Test CLI availability
        python -m sseed --version
        echo "✅ CLI interface working"
        echo "::endgroup::"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit safety pip-audit semgrep
    
    - name: Run comprehensive security audit
      run: |
        echo "::group::Comprehensive security audit"
        
        echo "🔒 Running Bandit security analysis..."
        bandit -r sseed/ -f json -o bandit-detailed.json
        bandit -r sseed/ -ll
        
        echo "🔒 Running Safety dependency check..."
        safety check -r requirements.txt --save-json safety-detailed.json 2>/dev/null || true
        safety check -r requirements.txt
        
        echo "🔒 Running pip-audit..."
        pip-audit --format=json --output=pip-audit.json
        pip-audit
        
        echo "✅ Security audit complete"
        echo "::endgroup::"
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: |
          bandit-detailed.json
          safety-detailed.json
          pip-audit.json

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test-suite
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark memory-profiler
    
    - name: Run performance tests
      run: |
        echo "::group::Performance benchmarks"
        python -c "
        import time
        import psutil
        import os
        from sseed.bip39 import generate_mnemonic
        from sseed.slip39_operations import create_slip39_shards, reconstruct_mnemonic_from_shards
        
        print('🚀 SSeed Performance Benchmarks')
        print('=' * 40)
        
        # BIP-39 generation benchmark
        start_time = time.perf_counter()
        start_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024
        
        mnemonic = generate_mnemonic()
        
        end_time = time.perf_counter()
        end_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024
        
        print(f'📊 BIP-39 Generation:')
        print(f'   Time: {(end_time - start_time) * 1000:.2f}ms')
        print(f'   Memory: {end_memory - start_memory:.1f}MB delta')
        
        # SLIP-39 sharding benchmark  
        start_time = time.perf_counter()
        start_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024
        
        shards = create_slip39_shards(mnemonic, 1, [(3, 5)])
        
        end_time = time.perf_counter()
        end_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024
        
        print(f'📊 SLIP-39 Sharding:')
        print(f'   Time: {(end_time - start_time) * 1000:.2f}ms')
        print(f'   Memory: {end_memory - start_memory:.1f}MB delta')
        
        # Reconstruction benchmark
        selected_shards = shards[:3]
        
        start_time = time.perf_counter()
        start_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024
        
        restored = reconstruct_mnemonic_from_shards(selected_shards)
        
        end_time = time.perf_counter()
        end_memory = psutil.Process(os.getpid()).memory_info().rss / 1024 / 1024
        
        print(f'📊 SLIP-39 Restoration:')
        print(f'   Time: {(end_time - start_time) * 1000:.2f}ms')
        print(f'   Memory: {end_memory - start_memory:.1f}MB delta')
        
        print(f'✅ Verification: {\"PASS\" if mnemonic == restored else \"FAIL\"}')
        "
        echo "::endgroup::"

  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [build-package, security-audit, performance-benchmarks]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
    
    - name: Verify release readiness
      run: |
        echo "::group::Release readiness verification"
        
        echo "🚀 Deployment Readiness Check"
        echo "=" * 40
        
        echo "✅ Quality checks passed"
        echo "✅ Test suite passed (≥90% coverage)"
        echo "✅ Property-based tests passed"
        echo "✅ Security audit passed"
        echo "✅ Performance benchmarks completed"
        echo "✅ Package built successfully"
        
        echo ""
        echo "📦 Release artifacts:"
        ls -la dist/
        
        echo ""
        echo "🎯 Ready for deployment to PyPI"
        echo "::endgroup::"

  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite, property-based-tests, build-package, security-audit, performance-benchmarks]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "🎉 CI/CD Pipeline Completed Successfully!"
        echo ""
        echo "✅ All quality checks passed"
        echo "✅ Test coverage ≥ ${{ env.MINIMUM_COVERAGE }}%"
        echo "✅ Security audit clean"
        echo "✅ Package builds successfully"
        echo "✅ Performance benchmarks completed"
        echo ""
        echo "🚀 SSeed is ready for deployment!" 